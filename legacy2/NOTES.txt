using jdeps (report usage of non standard API):
/usr/jdk/jdk-9/bin/jdeps --jdk-internals target/
target -> JDK removed internal API
target -> jdk.unsupported
   fr.umlv.papaya.api.Document                        -> sun.misc.BASE64Decoder                             JDK internal API (JDK removed internal API)
   fr.umlv.papaya.api.Document                        -> sun.misc.BASE64Encoder                             JDK internal API (JDK removed internal API)
   io.snowcamp.papaya.reflect.ReflectionSupport       -> sun.misc.Unsafe                                    JDK internal API (jdk.unsupported)

Warning: JDK internal APIs are unsupported and private to JDK implementation that are
subject to be removed or changed incompatibly and could break your application.
Please modify your code to eliminate dependence on any JDK internal APIs.
For the most recent update on JDK internal API replacements, please check:
https://wiki.openjdk.java.net/display/JDK8/Java+Dependency+Analysis+Tool

JDK Internal API                         Suggested Replacement
----------------                         ---------------------
sun.misc.BASE64Decoder                   Use java.util.Base64 @since 1.8
sun.misc.BASE64Encoder                   Use java.util.Base64 @since 1.8
sun.misc.Unsafe                          See http://openjdk.java.net/jeps/260


when switching to jdk9:
  ERROR 1:
    src/main/java/io/snowcamp/papaya/api/Document.java:11: error: cannot find symbol
      import sun.misc.BASE64Decoder;
                      ^
      symbol:   class BASE64Decoder
      location: package sun.misc

    sun.misc.BASE64Decoder does not exist anymore, it has been superseded by java.util.Base64 
    see https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html
  
    Note: running the program compiled for the JDK8 with the JDK9 do not work too,
       the class sun.misc.BASE64Decoder do not exist anymore !!
  
  SOLUTION:
    Replace usages of sun.misc.BASE64Decoder by java.util.Base64.Decoder and
    sun.misc.BASE64Encoder by java.util.Base64.Encoder
    
    default void putBlob(String key, byte[] blob) {
      put(key, new String(Base64.getEncoder().encode(blob), StandardCharsets.ISO_8859_1));
    }
    default Optional<byte[]> getBlob(String key) {
      return get(key, String.class).map(base64 -> Base64.getDecoder().decode(base64));
    }
    
 How to use modules:
 PHASE1: one big module, 
       papaya
         module-info
         io.snowcamp.papaya.api
         io.snowcamp.papaya.doc
         io.snowcamp.papaya.inmemory
         io.snowcamp.papaya.reflect
         io.snowcamp.papaya.spi

       1) create a folder 'papaya' at src/main/java and move 'io' in it
       2) add a module-info.java inside papaya
          module papaya {
          }
       3) do the same things with the test
       4) use pro as build tool and pro.json as build script
          $ pro
    
   ERROR:
     [pro] registered plugins compiler, convention, linker, modulefixer, packager, resolver, runner, uberpackager
     src/main/java/papaya/io/snowcamp/papaya/inmemory/InMemoryDBFactory.java:3: error: package org.json does not exist
       import org.json.JSONArray;
     ...
     src/main/java/papaya/io/snowcamp/papaya/reflect/ReflectionSupport.java:18: error: package sun.misc does not exist
       import sun.misc.Unsafe;
     ...
     
   SOLUTION:
     dependencies are now explicit, so we need to add requires org.json and jdk.unsupported
     i.e. in the module-info.java
     module papaya {
       requires json;                  // automatic module
       requires jdk.unsupported;
     }
     
     target/main/exploded contains the compiled sources
     target/main/artifacts contains the modular jar
     
  - by default, packages are not visible from outside the module.
    We need to export them
    module papaya {
       requires json;                  
       requires jdk.unsupported;
       
       exports io.snowcamp.papaya.api;
       exports io.snowcamp.papaya.doc;
       exports io.snowcamp.papaya.spi;
     } 
     
     io.snowcamp.papaya.inmemory and io.snowcamp.papaya.reflect contains implementations,
     no need to export them.
     
  - The tests are not executed, we need a module-info.java in the test folder too,
    The tests depends on junit so the module-info is
     module papaya {
       requires junit;
     }
     
     The modular jar target/main/artifact/papaya-1.0.jar contains the sources
     The modular jar target/test/artifact/test-papaya-1.0.jar contains the sources and the tests
     
  - try to run the tests
   ERROR 
     /usr/jdk/jdk-9/bin/java --module-path target/test/artifact:deps
                             -m papaya/io.snowcamp.papaya.test.Run
       Exception in thread "main" java.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing
	       at java.base/java.lang.ClassLoader.defineClass1(Native Method)
           ...
     
       automatic modules describe a flat hierarchy, we do not know that junit requires hamcrest-core
     
   SOLUTION
    Automatic module can see the classspath, so  
    /usr/jdk/jdk-9/bin/java --module-path target/test/artifact:deps
                            -classpath deps/hamcrest-core-1.3.jar
                            -m papaya/io.snowcamp.papaya.test.Run
     
   ANOTHER ERROR
     1) testInMemoryDBfindAllAppend(io.snowcamp.papaya.test.DBDocumentAPI)
        java.lang.IllegalAccessException: class org.junit.runners.BlockJUnit4ClassRunner (in module junit) cannot access
        class io.snowcamp.papaya.test.DBDocumentAPI (in module papaya) because module papaya does not export
        io.snowcamp.papaya.test to module junit

	  at java.base/jdk.internal.reflect.Reflection.throwIllegalAccessException(Reflection.java:418)
	  at java.base/jdk.internal.reflect.Reflection.throwIllegalAccessException(Reflection.java:409)
	  at java.base/jdk.internal.reflect.Reflection.ensureMemberAccess(Reflection.java:111)
	  at java.base/java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:364)
	  at java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:356)
	  at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:452)
      ...
     
     Obviously, if the JUnit tests has to be visible from the JUnit test runner,
     so the test must be declared in an exported package
     
   SOLUTION  
     In the module-info of the test, we need to export io.snowcamp.papaya.test
     module papaya {
       requires junit;
       
       exports io.snowcamp.papaya.test;
     }
     
     /usr/jdk/jdk-9/bin/java --module-path target/test/artifact:deps
                             -classpath deps/hamcrest-core-1.3.jar
                             -m papaya/io.snowcamp.papaya.test.Run
     .........
     Time: 0.043

     OK (9 tests)
 
    
 PHASE 2:  split in several modules
     In term of dependency,
                                  papaya.spi
                                      |
                       ----------------              
                       |              |
                       |        papaya.inmemory
                       |              |
                       ----------------               
                       |              |
                   papaya.api    papaya.reflect             
                       |              |
                       ----------------
                       |
                   papaya.doc
                       |
                    java.base
     
     So we can split in 3 modules, 
     papaya
         module-info
         io.snowcamp.papaya.spi 
         io.snowcamp.papaya.inmemory
         io.snowcamp.papaya.api
     papaya.reflect
         module-info
         io.snowcamp.papaya.reflect
     papaya.doc
         module-info
         io.snowcamp.papaya.doc
             
     1. creates a new directory in src/main/java named papaya.doc        
     2. move the package io.snowcamp.papaya.doc into papaya.doc
     3. create a new module-info.java
       module papaya.doc {
         requires java.base;   // optional !
  
         exports io.snowcamp.papaya.reflect;
       }
     4. creates a new directory in src/main/java named papaya.reflect
     5. move the package io.snowcamp.papaya.reflect into papaya.reflect
     6. create a new module-info.java
       module papaya.reflect {
         requires jdk.unsupported;
         requires papaya.doc
  
         exports io.snowcamp.papaya.reflect;
       }
     7. change src/main/java/papaya/module-info.java to be
       module papaya {
         requires json;
         requires papaya.doc;
         requires papaya.reflect;
  
         exports io.snowcamp.papaya.spi;
         exports io.snowcamp.papaya.api;
         // io.snowcamp.papaya.inmemory is not exported
       }
         
    - running the test with 
       /usr/jdk/jdk-9/bin/java --module-path target/test/artifact:deps
                               -classpath deps/hamcrest-core-1.3.jar
                               -m papaya/io.snowcamp.papaya.test.Run
                               
      ERROR                        
        Error occurred during initialization of VM
          java.lang.module.ResolutionException: Module papaya.doc not found, required by papaya
	        at java.lang.module.Resolver.fail(java.base@9-ea/Resolver.java:841)
	        at java.lang.module.Resolver.resolve(java.base@9-ea/Resolver.java:154)
	        at java.lang.module.Resolver.resolveRequires(java.base@9-ea/Resolver.java:116)
	        at java.lang.module.Configuration.resolveRequiresAndUses(java.base@9-ea/Configuration.java:311)
	        at java.lang.module.ModuleDescriptor$1.resolveRequiresAndUses(java.base@9-ea/ModuleDescriptor.java:2483)
	        at jdk.internal.module.ModuleBootstrap.boot(java.base@9-ea/ModuleBootstrap.java:272)
	        at java.lang.System.initPhase2(java.base@9-ea/System.java:1927)
       
       before running, the VM checks that all modules are available, here papaya.doc is not available.
       
      SOLUTION
       target/main/artifact has to be added *after* target/test/artifact
       
        /usr/jdk/jdk-9/bin/java --module-path target/test/artifact:target/main/artifact:deps
                               -classpath deps/hamcrest-core-1.3.jar
                               -m papaya/io.snowcamp.papaya.test.Run
       
       but this create another error                        
      ERROR
       1) testInMemoryDBPair(io.snowcamp.papaya.test.DBObjectAPI)
         java.lang.reflect.InaccessibleObjectException: Unable to make field
         private java.lang.String io.snowcamp.papaya.test.DBObjectAPI$Pair.first accessible:
         module papaya does not "opens io.snowcamp.papaya.test" to module papaya.reflect
	       at java.base/jdk.internal.reflect.Reflection.throwInaccessibleObjectException(Reflection.java:427)
	       at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:201)
	       at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:171)
	       at java.base/java.lang.reflect.Field.setAccessible(Field.java:165)
           ...
       
       Now the tests and io.snowcamp.papaya.reflect.ReflectionSupport are not in the same module anymore and                        
       the test testInMemoryDBPair ask ReflectionSupport to use reflection on its *private* fields.
       
      SOLUTION
       Here the best is to open the whole test module, so all tests will be able to test the reflection.
         open module papaya {
           requires junit;
           
           exports io.snowcamp.papaya.test;
         }
 
    - by default, required modules are not transitive.
      But you can not use the api, by example the interface DB without using a Document so for the users
      of the module papaya, papaya.doc should be required transitively.
        
      module papaya {
         requires json;
         requires transitive papaya.doc;
         requires papaya.reflect;
  
         exports io.snowcamp.papaya.spi;
         exports io.snowcamp.papaya.api;
       }
 
      **TODO**: new version of javac should report an error if requires transitive is not used
      
    - also we can restrict the package io.snowcamp.papaya.reflect to be used only by some trusted modules,
      by specifying a clause to after the directive export
        module papaya.reflect {
          requires jdk.unsupported;
          requires papaya.doc;
  
          exports io.snowcamp.papaya.reflect to papaya;
        }
      so only papaya will be able to use the classes of the package io.snowcamp.papaya.reflect.
      
   PHASE 3: here comes the services.
     If we take a look to the relation between papaya.api and papaya.inmemory, papaya.api is an abstract API
     and papaya.inmemory is its implementation. In term of implementation, we may want to provide
     another inmemory implementation so bundling papaya.api and papaya.inmemory together is not a good idea.
     
     The platform module API provides the feature of service/service provider help to separate the two packages.
     
     1. creates a new directory in src/main/java named papaya.inmemory        
     2. move the package io.snowcamp.papaya.inmemory into papaya.inmemory
     3. create a new module-info.java
       module papaya.inmemory {
         requires json;
         requires papaya;
         requires papaya.doc;
         requires papaya.reflect;
  
         provides io.snowcamp.papaya.api.BDFactory with
           io.snowcamp.papaya.inmemory.InMemoryDBFactory;
       }
     4. modify the module-info of papaya
       module papaya {
         requires transitive papaya.doc;
         
         exports io.snowcamp.papaya.api;
         exports io.snowcamp.papaya.spi;
         
         uses io.snowcamp.papaya.api.BDFactory;
       }
 
       and modify io.snowcamp.papaya.spi.StandardKind to use a java.util.ServiceLoader.
       (comment 'return new InMemoryDBFactory();' and uncomment the next 3 lines)
       
       Also do not forget that papaya.reflect now needs to be exported to papaya.inmemory.
       
       module papaya.reflect {
         requires jdk.unsupported;
         requires papaya.doc;
  
         exports io.snowcamp.papaya.reflect to papaya.inmemory;
       }
     
      
       
 